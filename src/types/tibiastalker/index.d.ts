/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/tibia-stalker/v1/characters/{characterName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get character details with 10 most scores possible other character names. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Name of searched character */
                    characterName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CharacterWithCorrelationsResult"];
                        "application/json": components["schemas"]["CharacterWithCorrelationsResult"];
                        "text/json": components["schemas"]["CharacterWithCorrelationsResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tibia-stalker/v1/characters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of character names based on a fragment of the name, sorted in ascending order. */
        get: {
            parameters: {
                query: {
                    /** @description A fragment of the character name. Required minimum 2 chars length of a fragment name. */
                    searchText: string;
                    /** @description The page number to view. Default value = 1 */
                    page: number;
                    /** @description The capacity of a single page. Default value = 10 */
                    pageSize: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FilteredCharactersDto"];
                        "application/json": components["schemas"]["FilteredCharactersDto"];
                        "text/json": components["schemas"]["FilteredCharactersDto"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tibia-stalker/v1/characters/prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of character names starts at fragment of the name, sorted in ascending order. */
        get: {
            parameters: {
                query: {
                    /** @description A fragment of the character name. Required minimum 2 chars length of a fragment name. */
                    searchText: string;
                    /** @description The page number to view. Default value = 1 */
                    page: number;
                    /** @description The capacity of a single page. Default value = 10 */
                    pageSize: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tibia-stalker/v1/worlds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get filtered worlds. */
        get: {
            parameters: {
                query?: {
                    /** @description If "true" than return all active worlds at this moment in applocation. */
                    isAvailable?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CharacterWithCorrelationsResult: {
            name?: string | null;
            world?: string | null;
            vocation?: string | null;
            /** Format: int32 */
            level?: number;
            lastLogin?: string | null;
            formerNames?: string[] | null;
            formerWorlds?: string[] | null;
            traded?: boolean;
            otherVisibleCharacters?: string[] | null;
            possibleInvisibleCharacters?: components["schemas"]["CorrelationResult"][] | null;
        };
        CorrelationResult: {
            otherCharacterName?: string | null;
            /** Format: int32 */
            numberOfMatches?: number;
            /** Format: date */
            readonly firstMatchDateOnly?: string;
            /** Format: date */
            readonly lastMatchDateOnly?: string;
        };
        FilteredCharactersDto: {
            /** Format: int32 */
            totalCount?: number;
            names?: string[] | null;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
